#!/usr/bin/env python3
# Copyright (c) 2019 Siemens AG
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Author(s): Jonas Plum

import os
import sys
import types

import jinja2

import forensicstore


class Report:

    def __init__(self):
        super().__init__()
        self.scatter = False
        dir_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "templates")
        self.template_loader = jinja2.FileSystemLoader(searchpath=dir_path)

    def transform(self, store, item, args, context):
        if isinstance(item, types.GeneratorType):
            item = list(item)
        template_env = jinja2.Environment(loader=self.template_loader, autoescape=args.get("escape", True))

        template = template_env.get_template(args["template"])
        output = template.render(data=item, args=args)

        report_name = context.get('information_name', 'report') + ".md"
        try:
            with store.store_file(os.path.join("Reports", report_name)) as (report_path, file_io):
                file_io.write(output.encode("UTF-8"))
                return [{"type": "report", "report_path": report_path, "format": "markdown"}]
        except Exception as error:
            return [{"type": "report", "errors": [str(error)]}]


def main():
    store = forensicstore.connect(".")
    transformer = Report()
    items = list(store.select("windows-registry-key"))  # TODO: add arguments
    print(items)
    results = transformer.transform(store, items, {"template": sys.argv[1]}, {})
    print(results)
    store.close()


if __name__ == '__main__':
    main()
